// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rdpzsd.Models;

namespace Rdpzsd.Models.Migrations
{
    [DbContext(typeof(RdpzsdDbContext))]
    [Migration("20220628060724_V1.0.4")]
    partial class V104
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("EeaCountry")
                        .HasColumnType("boolean")
                        .HasColumnName("eeacountry");

                    b.Property<bool>("EuCountry")
                        .HasColumnType("boolean")
                        .HasColumnName("eucountry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SecondLevelRegionCode")
                        .HasColumnType("text")
                        .HasColumnName("secondlevelregioncode");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("district");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.EducationalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("DataUniExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("datauniexternalid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationalform");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("DataUniExternalId")
                        .HasColumnType("integer")
                        .HasColumnName("datauniexternalid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationalqualification");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsResearchUniversity")
                        .HasColumnType("boolean")
                        .HasColumnName("isresearchuniversity");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("LotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lotnumber");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("OrganizationType")
                        .HasColumnType("integer")
                        .HasColumnName("organizationtype");

                    b.Property<int?>("OwnershipType")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptype");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<int?>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.HasIndex("SettlementId");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Duration")
                        .HasColumnType("numeric")
                        .HasColumnName("duration");

                    b.Property<int?>("EducationalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalformid");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<bool>("IsAccredited")
                        .HasColumnType("boolean")
                        .HasColumnName("isaccredited");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsForCadets")
                        .HasColumnType("boolean")
                        .HasColumnName("isforcadets");

                    b.Property<bool?>("IsJointSpeciality")
                        .HasColumnType("boolean")
                        .HasColumnName("isjointspeciality");

                    b.Property<int?>("NationalStatisticalInstituteId")
                        .HasColumnType("integer")
                        .HasColumnName("nationalstatisticalinstituteid");

                    b.Property<int?>("NsiRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("nsiregionid");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EducationalFormId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NationalStatisticalInstituteId");

                    b.HasIndex("NsiRegionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("institutionspeciality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpecialityJointSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ForeignInstitutionByParentName")
                        .HasColumnType("text")
                        .HasColumnName("foreigninstitutionbyparentname");

                    b.Property<string>("ForeignInstitutionName")
                        .HasColumnType("text")
                        .HasColumnName("foreigninstitutionname");

                    b.Property<int?>("InstitutionByParentId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionbyparentid");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionByParentId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionSpecialityId");

                    b.ToTable("institutionspecialityjointspeciality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpecialityLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("languageid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionSpecialityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("institutionspecialitylanguage");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("language");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("municipality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.NationalStatisticalInstitute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool?>("ForDoctors")
                        .HasColumnType("boolean")
                        .HasColumnName("fordoctors");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("OldCode")
                        .HasColumnType("text")
                        .HasColumnName("oldcode");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("nationalstatisticalinstitute");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdmissionReasonStudentType")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonstudenttype");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("CountryUnion")
                        .HasColumnType("integer")
                        .HasColumnName("countryunion");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("OldCode")
                        .HasColumnType("text")
                        .HasColumnName("oldcode");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("admissionreason");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonCitizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryid");

                    b.Property<bool?>("ExcludeCountry")
                        .HasColumnType("boolean")
                        .HasColumnName("excludecountry");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("CountryId");

                    b.ToTable("admissionreasoncitizenship");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonEducationFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<int>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("EducationFeeTypeId");

                    b.ToTable("admissionreasoneducationfee");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonEducationFeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdmissionReasonHistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonhistoryid");

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<int>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<string>("EducationFeeTypeName")
                        .HasColumnType("text")
                        .HasColumnName("educationfeetypename");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonHistoryId");

                    b.ToTable("admissionreasoneducationfeehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changedate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.ToTable("admissionreasonhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("OldCode")
                        .HasColumnType("text")
                        .HasColumnName("oldcode");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("educationfeetype");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Semester")
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("period");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("MigrationId")
                        .HasColumnType("integer")
                        .HasColumnName("migrationid");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptype");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SettlementId");

                    b.ToTable("school");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CodeNumber")
                        .HasColumnType("text")
                        .HasColumnName("codenumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("researcharea");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("text")
                        .HasColumnName("districtcode");

                    b.Property<string>("DistrictCode2")
                        .HasColumnType("text")
                        .HasColumnName("districtcode2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDistrict")
                        .HasColumnType("boolean")
                        .HasColumnName("isdistrict");

                    b.Property<string>("MayoraltyCode")
                        .HasColumnType("text")
                        .HasColumnName("mayoraltycode");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode");

                    b.Property<string>("MunicipalityCode2")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode2");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SettlementName")
                        .HasColumnType("text")
                        .HasColumnName("settlementname");

                    b.Property<string>("TypeCode")
                        .HasColumnType("text")
                        .HasColumnName("typecode");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("settlement");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("EducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalqualificationid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsRegulated")
                        .HasColumnType("boolean")
                        .HasColumnName("isregulated");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("researchareaid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EducationalQualificationId");

                    b.HasIndex("ResearchAreaId");

                    b.ToTable("speciality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("studentevent");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEventQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("educationalqualificationid");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EducationalQualificationId");

                    b.HasIndex("StudentEventId");

                    b.ToTable("studenteventqualification");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("studentstatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Migration.PersonLotIdNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("ApplicationId")
                        .HasColumnType("double precision")
                        .HasColumnName("applicationid");

                    b.Property<int?>("IdentifierTypeAction")
                        .HasColumnType("integer")
                        .HasColumnName("identifiertypeaction");

                    b.Property<int?>("InstitutionLotId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionlotid");

                    b.Property<double?>("MigrationIdNumber")
                        .HasColumnType("double precision")
                        .HasColumnName("migrationidnumber");

                    b.Property<int?>("MigrationUniId")
                        .HasColumnType("integer")
                        .HasColumnName("migrationuniid");

                    b.Property<int>("PersonLotId")
                        .HasColumnType("integer")
                        .HasColumnName("personlotid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.HasKey("Id");

                    b.HasIndex("PersonLotId");

                    b.ToTable("personlotidnumber");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.Collections.PassportCopy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("passportcopy");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PassportCopyHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("passportcopyhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BirthCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("birthcountryid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<int?>("BirthDistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("birthdistrictid");

                    b.Property<int?>("BirthMunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("birthmunicipalityid");

                    b.Property<int?>("BirthSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("birthsettlementid");

                    b.Property<int>("CitizenshipId")
                        .HasColumnType("integer")
                        .HasColumnName("citizenshipid");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("FirstNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstnamealt");

                    b.Property<string>("ForeignerBirthSettlement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("foreignerbirthsettlement");

                    b.Property<string>("ForeignerNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("foreignernumber")
                        .IsFixedLength(true);

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("FullNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("fullnamealt");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("IdnNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("idnnumber");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LastNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastnamealt");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("MiddleNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlenamealt");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("othernames");

                    b.Property<string>("OtherNamesAlt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("othernamesalt");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("PostCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("postcode");

                    b.Property<string>("ResidenceAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("residenceaddress");

                    b.Property<int?>("ResidenceCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("residencecountryid");

                    b.Property<int?>("ResidenceDistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("residencedistrictid");

                    b.Property<int?>("ResidenceMunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("residencemunicipalityid");

                    b.Property<int?>("ResidenceSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("residencesettlementid");

                    b.Property<int?>("SecondCitizenshipId")
                        .HasColumnType("integer")
                        .HasColumnName("secondcitizenshipid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Uin")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("uin")
                        .IsFixedLength(true);

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BirthDistrictId");

                    b.HasIndex("BirthMunicipalityId");

                    b.HasIndex("BirthSettlementId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("PartId");

                    b.HasIndex("ResidenceCountryId");

                    b.HasIndex("ResidenceDistrictId");

                    b.HasIndex("ResidenceMunicipalityId");

                    b.HasIndex("ResidenceSettlementId");

                    b.HasIndex("SecondCitizenshipId");

                    b.ToTable("personbasichistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personbasichistoryinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enddate");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<int?>("PeAcquiredForeignEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peacquiredforeigneducationalqualificationid");

                    b.Property<string>("PeAcquiredSpeciality")
                        .HasColumnType("text")
                        .HasColumnName("peacquiredspeciality");

                    b.Property<int?>("PeCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("pecountryid");

                    b.Property<DateTime?>("PeDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pediplomadate");

                    b.Property<string>("PeDiplomaNumber")
                        .HasColumnType("text")
                        .HasColumnName("pediplomanumber");

                    b.Property<int?>("PeEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peeducationalqualificationid");

                    b.Property<int?>("PeHighSchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("pehighschooltype");

                    b.Property<int?>("PeInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionid");

                    b.Property<string>("PeInstitutionName")
                        .HasColumnType("text")
                        .HasColumnName("peinstitutionname");

                    b.Property<int?>("PeInstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionspecialityid");

                    b.Property<int?>("PePartId")
                        .HasColumnType("integer")
                        .HasColumnName("pepartid");

                    b.Property<DateTime?>("PeRecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("perecognitiondate");

                    b.Property<string>("PeRecognitionNumber")
                        .HasColumnType("text")
                        .HasColumnName("perecognitionnumber");

                    b.Property<string>("PeRecognizedSpeciality")
                        .HasColumnType("text")
                        .HasColumnName("perecognizedspeciality");

                    b.Property<int?>("PeResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("peresearchareaid");

                    b.Property<bool?>("PeSpecialityMissingInRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("pespecialitymissinginregister");

                    b.Property<string>("PeSpecialityName")
                        .HasColumnType("text")
                        .HasColumnName("pespecialityname");

                    b.Property<int?>("PeSubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("pesubordinateid");

                    b.Property<string>("PeSubordinateName")
                        .HasColumnType("text")
                        .HasColumnName("pesubordinatename");

                    b.Property<int>("PeType")
                        .HasColumnType("integer")
                        .HasColumnName("petype");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionSpecialityId");

                    b.HasIndex("PartId");

                    b.HasIndex("PeAcquiredForeignEducationalQualificationId");

                    b.HasIndex("PeCountryId");

                    b.HasIndex("PeEducationalQualificationId");

                    b.HasIndex("PeInstitutionId");

                    b.HasIndex("PeInstitutionSpecialityId");

                    b.HasIndex("PeResearchAreaId");

                    b.HasIndex("PeSubordinateId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("persondoctoralhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("persondoctoralhistoryinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralPeRecognitionDocumentHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("persondoctoralperecognitiondocumenthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralSemesterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AttestationType")
                        .HasColumnType("integer")
                        .HasColumnName("attestationtype");

                    b.Property<int?>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<bool>("HasScholarship")
                        .HasColumnType("boolean")
                        .HasColumnName("hasscholarship");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<bool>("ParticipatedIntPrograms")
                        .HasColumnType("boolean")
                        .HasColumnName("participatedintprograms");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("protocoldate");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("text")
                        .HasColumnName("protocolnumber");

                    b.Property<int?>("RelocatedFromPartId")
                        .HasColumnType("integer")
                        .HasColumnName("relocatedfrompartid");

                    b.Property<DateTime?>("SemesterRelocatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("semesterrelocateddate");

                    b.Property<string>("SemesterRelocatedNumber")
                        .HasColumnType("text")
                        .HasColumnName("semesterrelocatednumber");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<bool>("UseHolidayBase")
                        .HasColumnType("boolean")
                        .HasColumnName("useholidaybase");

                    b.Property<bool>("UseHostel")
                        .HasColumnType("boolean")
                        .HasColumnName("usehostel");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("YearType")
                        .HasColumnType("integer")
                        .HasColumnName("yeartype");

                    b.HasKey("Id");

                    b.HasIndex("EducationFeeTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("RelocatedFromPartId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("persondoctoralsemesterhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonImageHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimagehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaFileHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentdiplomafilehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("diplomadate");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("diplomanumber");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("isvalid");

                    b.Property<string>("RegistrationDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("registrationdiplomanumber");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentdiplomahistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaFileHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentduplicatediplomafilehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DuplicateDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("duplicatediplomadate");

                    b.Property<string>("DuplicateDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("duplicatediplomanumber");

                    b.Property<string>("DuplicateRegistrationDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("duplicateregistrationdiplomanumber");

                    b.Property<int>("DuplicateStickerState")
                        .HasColumnType("integer")
                        .HasColumnName("duplicatestickerstate");

                    b.Property<int>("DuplicateStickerYear")
                        .HasColumnType("integer")
                        .HasColumnName("duplicatestickeryear");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("isvalid");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("personstudentduplicatediplomahistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("facultynumber");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<int?>("PeAcquiredForeignEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peacquiredforeigneducationalqualificationid");

                    b.Property<string>("PeAcquiredSpeciality")
                        .HasColumnType("text")
                        .HasColumnName("peacquiredspeciality");

                    b.Property<int?>("PeCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("pecountryid");

                    b.Property<DateTime?>("PeDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pediplomadate");

                    b.Property<string>("PeDiplomaNumber")
                        .HasColumnType("text")
                        .HasColumnName("pediplomanumber");

                    b.Property<int?>("PeEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peeducationalqualificationid");

                    b.Property<int?>("PeHighSchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("pehighschooltype");

                    b.Property<int?>("PeInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionid");

                    b.Property<string>("PeInstitutionName")
                        .HasColumnType("text")
                        .HasColumnName("peinstitutionname");

                    b.Property<int?>("PeInstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionspecialityid");

                    b.Property<int?>("PePartId")
                        .HasColumnType("integer")
                        .HasColumnName("pepartid");

                    b.Property<DateTime?>("PeRecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("perecognitiondate");

                    b.Property<string>("PeRecognitionNumber")
                        .HasColumnType("text")
                        .HasColumnName("perecognitionnumber");

                    b.Property<string>("PeRecognizedSpeciality")
                        .HasColumnType("text")
                        .HasColumnName("perecognizedspeciality");

                    b.Property<int?>("PeResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("peresearchareaid");

                    b.Property<bool?>("PeSpecialityMissingInRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("pespecialitymissinginregister");

                    b.Property<string>("PeSpecialityName")
                        .HasColumnType("text")
                        .HasColumnName("pespecialityname");

                    b.Property<int?>("PeSubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("pesubordinateid");

                    b.Property<string>("PeSubordinateName")
                        .HasColumnType("text")
                        .HasColumnName("pesubordinatename");

                    b.Property<int>("PeType")
                        .HasColumnType("integer")
                        .HasColumnName("petype");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("StickerState")
                        .HasColumnType("integer")
                        .HasColumnName("stickerstate");

                    b.Property<int?>("StickerYear")
                        .HasColumnType("integer")
                        .HasColumnName("stickeryear");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionSpecialityId");

                    b.HasIndex("PartId");

                    b.HasIndex("PeAcquiredForeignEducationalQualificationId");

                    b.HasIndex("PeCountryId");

                    b.HasIndex("PeEducationalQualificationId");

                    b.HasIndex("PeInstitutionId");

                    b.HasIndex("PeInstitutionSpecialityId");

                    b.HasIndex("PeResearchAreaId");

                    b.HasIndex("PeSubordinateId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personstudenthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personstudenthistoryinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentPeRecognitionDocumentHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentperecognitiondocumenthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentProtocolHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("protocoldate");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("protocolnumber");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("integer")
                        .HasColumnName("protocoltype");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("personstudentprotocolhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentSemesterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Course")
                        .HasColumnType("integer")
                        .HasColumnName("course");

                    b.Property<int?>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<bool>("HasScholarship")
                        .HasColumnType("boolean")
                        .HasColumnName("hasscholarship");

                    b.Property<int?>("IndividualPlanCourse")
                        .HasColumnType("integer")
                        .HasColumnName("individualplancourse");

                    b.Property<int?>("IndividualPlanSemester")
                        .HasColumnType("integer")
                        .HasColumnName("individualplansemester");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<bool>("ParticipatedIntPrograms")
                        .HasColumnType("boolean")
                        .HasColumnName("participatedintprograms");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("periodid");

                    b.Property<int?>("RelocatedFromPartId")
                        .HasColumnType("integer")
                        .HasColumnName("relocatedfrompartid");

                    b.Property<bool>("SecondFromTwoYearsPlan")
                        .HasColumnType("boolean")
                        .HasColumnName("secondfromtwoyearsplan");

                    b.Property<int>("SemesterInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("semesterinstitutionid");

                    b.Property<DateTime?>("SemesterRelocatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("semesterrelocateddate");

                    b.Property<string>("SemesterRelocatedNumber")
                        .HasColumnType("text")
                        .HasColumnName("semesterrelocatednumber");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentSemester")
                        .HasColumnType("integer")
                        .HasColumnName("studentsemester");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<bool>("UseHolidayBase")
                        .HasColumnType("boolean")
                        .HasColumnName("useholidaybase");

                    b.Property<bool>("UseHostel")
                        .HasColumnType("boolean")
                        .HasColumnName("usehostel");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EducationFeeTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RelocatedFromPartId");

                    b.HasIndex("SemesterInstitutionId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("personstudentsemesterhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("BirthCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("birthcountryid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<int?>("BirthDistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("birthdistrictid");

                    b.Property<int?>("BirthMunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("birthmunicipalityid");

                    b.Property<int?>("BirthSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("birthsettlementid");

                    b.Property<int>("CitizenshipId")
                        .HasColumnType("integer")
                        .HasColumnName("citizenshipid");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("FirstNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstnamealt");

                    b.Property<string>("ForeignerBirthSettlement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("foreignerbirthsettlement");

                    b.Property<string>("ForeignerNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("foreignernumber")
                        .IsFixedLength(true);

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("FullNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("fullnamealt");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("IdnNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("idnnumber");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("LastNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastnamealt");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("MiddleNameAlt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlenamealt");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("othernames");

                    b.Property<string>("OtherNamesAlt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("othernamesalt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("PostCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("postcode");

                    b.Property<string>("ResidenceAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("residenceaddress");

                    b.Property<int?>("ResidenceCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("residencecountryid");

                    b.Property<int?>("ResidenceDistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("residencedistrictid");

                    b.Property<int?>("ResidenceMunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("residencemunicipalityid");

                    b.Property<int?>("ResidenceSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("residencesettlementid");

                    b.Property<int?>("SecondCitizenshipId")
                        .HasColumnType("integer")
                        .HasColumnName("secondcitizenshipid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Uin")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("uin")
                        .IsFixedLength(true);

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BirthDistrictId");

                    b.HasIndex("BirthMunicipalityId");

                    b.HasIndex("BirthSettlementId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("(email) NOT ILIKE 'NoEmail'");

                    b.HasIndex("ForeignerNumber")
                        .IsUnique();

                    b.HasIndex("ResidenceCountryId");

                    b.HasIndex("ResidenceDistrictId");

                    b.HasIndex("ResidenceMunicipalityId");

                    b.HasIndex("ResidenceSettlementId");

                    b.HasIndex("SecondCitizenshipId");

                    b.HasIndex("Uin")
                        .IsUnique();

                    b.ToTable("personbasic");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personbasicinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enddate");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lotid");

                    b.Property<int?>("PeAcquiredForeignEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peacquiredforeigneducationalqualificationid");

                    b.Property<string>("PeAcquiredSpeciality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("peacquiredspeciality");

                    b.Property<int?>("PeCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("pecountryid");

                    b.Property<DateTime?>("PeDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pediplomadate");

                    b.Property<string>("PeDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("pediplomanumber");

                    b.Property<int?>("PeEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peeducationalqualificationid");

                    b.Property<int?>("PeHighSchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("pehighschooltype");

                    b.Property<int?>("PeInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionid");

                    b.Property<string>("PeInstitutionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("peinstitutionname");

                    b.Property<int?>("PeInstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionspecialityid");

                    b.Property<int?>("PePartId")
                        .HasColumnType("integer")
                        .HasColumnName("pepartid");

                    b.Property<DateTime?>("PeRecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("perecognitiondate");

                    b.Property<string>("PeRecognitionNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("perecognitionnumber");

                    b.Property<string>("PeRecognizedSpeciality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("perecognizedspeciality");

                    b.Property<int?>("PeResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("peresearchareaid");

                    b.Property<bool?>("PeSpecialityMissingInRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("pespecialitymissinginregister");

                    b.Property<string>("PeSpecialityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pespecialityname");

                    b.Property<int?>("PeSubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("pesubordinateid");

                    b.Property<string>("PeSubordinateName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pesubordinatename");

                    b.Property<int>("PeType")
                        .HasColumnType("integer")
                        .HasColumnName("petype");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionSpecialityId");

                    b.HasIndex("LotId");

                    b.HasIndex("PeAcquiredForeignEducationalQualificationId");

                    b.HasIndex("PeCountryId");

                    b.HasIndex("PeEducationalQualificationId");

                    b.HasIndex("PeInstitutionId");

                    b.HasIndex("PeInstitutionSpecialityId");

                    b.HasIndex("PePartId");

                    b.HasIndex("PeResearchAreaId");

                    b.HasIndex("PeSubordinateId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("persondoctoral");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("persondoctoralinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralPeRecognitionDocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("persondoctoralperecognitiondocument");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AttestationType")
                        .HasColumnType("integer")
                        .HasColumnName("attestationtype");

                    b.Property<int?>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<bool>("HasScholarship")
                        .HasColumnType("boolean")
                        .HasColumnName("hasscholarship");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<bool>("ParticipatedIntPrograms")
                        .HasColumnType("boolean")
                        .HasColumnName("participatedintprograms");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("protocoldate");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("protocolnumber");

                    b.Property<int?>("RelocatedFromPartId")
                        .HasColumnType("integer")
                        .HasColumnName("relocatedfrompartid");

                    b.Property<DateTime?>("SemesterRelocatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("semesterrelocateddate");

                    b.Property<string>("SemesterRelocatedNumber")
                        .HasColumnType("text")
                        .HasColumnName("semesterrelocatednumber");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<bool>("UseHolidayBase")
                        .HasColumnType("boolean")
                        .HasColumnName("useholidaybase");

                    b.Property<bool>("UseHostel")
                        .HasColumnType("boolean")
                        .HasColumnName("usehostel");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("YearType")
                        .HasColumnType("integer")
                        .HasColumnName("yeartype");

                    b.HasKey("Id");

                    b.HasIndex("EducationFeeTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("RelocatedFromPartId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("persondoctoralsemester");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("persondoctoralsemesterrelocatedfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFileHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("persondoctoralsemesterrelocatedfilehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonImage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimage");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryid");

                    b.Property<DateTime?>("DiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("diplomadate");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("diplomanumber");

                    b.Property<string>("ForeignSchoolName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("foreignschoolname");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("integer")
                        .HasColumnName("graduationyear");

                    b.Property<bool>("MissingSchoolFromRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("missingschoolfromregister");

                    b.Property<string>("MissingSchoolName")
                        .HasColumnType("text")
                        .HasColumnName("missingschoolname");

                    b.Property<int?>("MissingSchoolSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("missingschoolsettlementid");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<string>("Profession")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("profession");

                    b.Property<DateTime?>("RecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recognitiondate");

                    b.Property<string>("RecognitionNumber")
                        .HasColumnType("text")
                        .HasColumnName("recognitionnumber");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("schoolid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MissingSchoolSettlementId");

                    b.HasIndex("PartId");

                    b.HasIndex("SchoolId");

                    b.ToTable("personsecondaryhistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personsecondaryhistoryinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryRecognitionDocumentHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personsecondaryrecognitiondocumenthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonDiplomaCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DocName")
                        .HasColumnType("text")
                        .HasColumnName("docname");

                    b.Property<DateTime?>("DtOrigRegDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtorigregdate");

                    b.Property<DateTime?>("DtProtDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtprotdate");

                    b.Property<DateTime?>("DtRegDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dtregdate");

                    b.Property<int?>("IntCurrVer")
                        .HasColumnType("integer")
                        .HasColumnName("intcurrver");

                    b.Property<int>("IntCurrYear")
                        .HasColumnType("integer")
                        .HasColumnName("intcurryear");

                    b.Property<int?>("IntDocID")
                        .HasColumnType("integer")
                        .HasColumnName("intdocid");

                    b.Property<double?>("IntDocTemplID")
                        .HasColumnType("double precision")
                        .HasColumnName("intdoctemplid");

                    b.Property<double?>("IntID")
                        .HasColumnType("double precision")
                        .HasColumnName("intid");

                    b.Property<int?>("IntIDType")
                        .HasColumnType("integer")
                        .HasColumnName("intidtype");

                    b.Property<decimal?>("IntMeanMark")
                        .HasColumnType("numeric")
                        .HasColumnName("intmeanmark");

                    b.Property<int?>("IntSchoolID")
                        .HasColumnType("integer")
                        .HasColumnName("intschoolid");

                    b.Property<long>("IntStudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("intstudentid");

                    b.Property<int?>("IntYearGraduated")
                        .HasColumnType("integer")
                        .HasColumnName("intyeargraduated");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lotid");

                    b.Property<string>("SchoolMun")
                        .HasColumnType("text")
                        .HasColumnName("schoolmun");

                    b.Property<string>("SchoolObl")
                        .HasColumnType("text")
                        .HasColumnName("schoolobl");

                    b.Property<string>("SchoolTown")
                        .HasColumnType("text")
                        .HasColumnName("schooltown");

                    b.Property<string>("VcIDNumberText")
                        .HasColumnType("text")
                        .HasColumnName("vcidnumbertext");

                    b.Property<string>("VcOrigPrnNo")
                        .HasColumnType("text")
                        .HasColumnName("vcorigprnno");

                    b.Property<string>("VcOrigPrnSer")
                        .HasColumnType("text")
                        .HasColumnName("vcorigprnser");

                    b.Property<string>("VcOrigRegNo1")
                        .HasColumnType("text")
                        .HasColumnName("vcorigregno1");

                    b.Property<string>("VcOrigRegNo2")
                        .HasColumnType("text")
                        .HasColumnName("vcorigregno2");

                    b.Property<string>("VcOrigSchoolName")
                        .HasColumnType("text")
                        .HasColumnName("vcorigschoolname");

                    b.Property<string>("VcPrnNo")
                        .HasColumnType("text")
                        .HasColumnName("vcprnno");

                    b.Property<string>("VcPrnSer")
                        .HasColumnType("text")
                        .HasColumnName("vcprnser");

                    b.Property<string>("VcProtNo")
                        .HasColumnType("text")
                        .HasColumnName("vcprotno");

                    b.Property<string>("VcRegNo1")
                        .HasColumnType("text")
                        .HasColumnName("vcregno1");

                    b.Property<string>("VcRegNo2")
                        .HasColumnType("text")
                        .HasColumnName("vcregno2");

                    b.Property<string>("VcSchoolName")
                        .HasColumnType("text")
                        .HasColumnName("vcschoolname");

                    b.Property<string>("VcStudName1")
                        .HasColumnType("text")
                        .HasColumnName("vcstudname1");

                    b.Property<string>("VcStudName2")
                        .HasColumnType("text")
                        .HasColumnName("vcstudname2");

                    b.Property<string>("VcStudName3")
                        .HasColumnType("text")
                        .HasColumnName("vcstudname3");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("persondiplomacopy");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("countryid");

                    b.Property<DateTime?>("DiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("diplomadate");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("diplomanumber");

                    b.Property<string>("ForeignSchoolName")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("foreignschoolname");

                    b.Property<bool>("FromRso")
                        .HasColumnType("boolean")
                        .HasColumnName("fromrso");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("integer")
                        .HasColumnName("graduationyear");

                    b.Property<bool>("MissingSchoolFromRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("missingschoolfromregister");

                    b.Property<string>("MissingSchoolName")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("missingschoolname");

                    b.Property<int?>("MissingSchoolSettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("missingschoolsettlementid");

                    b.Property<string>("Profession")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("profession");

                    b.Property<DateTime?>("RecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recognitiondate");

                    b.Property<string>("RecognitionNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("recognitionnumber");

                    b.Property<double?>("RsoIntId")
                        .HasColumnType("double precision")
                        .HasColumnName("rsointid");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("schoolid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MissingSchoolSettlementId");

                    b.HasIndex("SchoolId");

                    b.ToTable("personsecondary");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personsecondaryinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryRecognitionDocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personsecondaryrecognitiondocument");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdmissionReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("admissionreasonid");

                    b.Property<string>("FacultyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("facultynumber");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("InstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionspecialityid");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lotid");

                    b.Property<int?>("PeAcquiredForeignEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peacquiredforeigneducationalqualificationid");

                    b.Property<string>("PeAcquiredSpeciality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("peacquiredspeciality");

                    b.Property<int?>("PeCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("pecountryid");

                    b.Property<DateTime?>("PeDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pediplomadate");

                    b.Property<string>("PeDiplomaNumber")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("pediplomanumber");

                    b.Property<int?>("PeEducationalQualificationId")
                        .HasColumnType("integer")
                        .HasColumnName("peeducationalqualificationid");

                    b.Property<int?>("PeHighSchoolType")
                        .HasColumnType("integer")
                        .HasColumnName("pehighschooltype");

                    b.Property<int?>("PeInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionid");

                    b.Property<string>("PeInstitutionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("peinstitutionname");

                    b.Property<int?>("PeInstitutionSpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("peinstitutionspecialityid");

                    b.Property<int?>("PePartId")
                        .HasColumnType("integer")
                        .HasColumnName("pepartid");

                    b.Property<DateTime?>("PeRecognitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("perecognitiondate");

                    b.Property<string>("PeRecognitionNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("perecognitionnumber");

                    b.Property<string>("PeRecognizedSpeciality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("perecognizedspeciality");

                    b.Property<int?>("PeResearchAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("peresearchareaid");

                    b.Property<bool?>("PeSpecialityMissingInRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("pespecialitymissinginregister");

                    b.Property<string>("PeSpecialityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pespecialityname");

                    b.Property<int?>("PeSubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("pesubordinateid");

                    b.Property<string>("PeSubordinateName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pesubordinatename");

                    b.Property<int>("PeType")
                        .HasColumnType("integer")
                        .HasColumnName("petype");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("StickerState")
                        .HasColumnType("integer")
                        .HasColumnName("stickerstate");

                    b.Property<int?>("StickerYear")
                        .HasColumnType("integer")
                        .HasColumnName("stickeryear");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionReasonId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionSpecialityId");

                    b.HasIndex("LotId");

                    b.HasIndex("PeAcquiredForeignEducationalQualificationId");

                    b.HasIndex("PeCountryId");

                    b.HasIndex("PeEducationalQualificationId");

                    b.HasIndex("PeInstitutionId");

                    b.HasIndex("PeInstitutionSpecialityId");

                    b.HasIndex("PePartId");

                    b.HasIndex("PeResearchAreaId");

                    b.HasIndex("PeSubordinateId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personstudent");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiploma", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("diplomadate");

                    b.Property<string>("DiplomaNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("diplomanumber");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("isvalid");

                    b.Property<string>("RegistrationDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("registrationdiplomanumber");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentdiploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiplomaFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentdiplomafile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiploma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DuplicateDiplomaDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("duplicatediplomadate");

                    b.Property<string>("DuplicateDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("duplicatediplomanumber");

                    b.Property<string>("DuplicateRegistrationDiplomaNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("duplicateregistrationdiplomanumber");

                    b.Property<int>("DuplicateStickerState")
                        .HasColumnType("integer")
                        .HasColumnName("duplicatestickerstate");

                    b.Property<int>("DuplicateStickerYear")
                        .HasColumnType("integer")
                        .HasColumnName("duplicatestickeryear");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("isvalid");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("personstudentduplicatediploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiplomaFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentduplicatediplomafile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personstudentinfo");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentPeRecognitionDocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentperecognitiondocument");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<DateTime>("ProtocolDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("protocoldate");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("protocolnumber");

                    b.Property<int>("ProtocolType")
                        .HasColumnType("integer")
                        .HasColumnName("protocoltype");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.ToTable("personstudentprotocol");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Course")
                        .HasColumnType("integer")
                        .HasColumnName("course");

                    b.Property<int?>("EducationFeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("educationfeetypeid");

                    b.Property<bool>("HasScholarship")
                        .HasColumnType("boolean")
                        .HasColumnName("hasscholarship");

                    b.Property<int?>("IndividualPlanCourse")
                        .HasColumnType("integer")
                        .HasColumnName("individualplancourse");

                    b.Property<int?>("IndividualPlanSemester")
                        .HasColumnType("integer")
                        .HasColumnName("individualplansemester");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<bool>("ParticipatedIntPrograms")
                        .HasColumnType("boolean")
                        .HasColumnName("participatedintprograms");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("periodid");

                    b.Property<int?>("RelocatedFromPartId")
                        .HasColumnType("integer")
                        .HasColumnName("relocatedfrompartid");

                    b.Property<bool>("SecondFromTwoYearsPlan")
                        .HasColumnType("boolean")
                        .HasColumnName("secondfromtwoyearsplan");

                    b.Property<int>("SemesterInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("semesterinstitutionid");

                    b.Property<DateTime?>("SemesterRelocatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("semesterrelocateddate");

                    b.Property<string>("SemesterRelocatedNumber")
                        .HasColumnType("text")
                        .HasColumnName("semesterrelocatednumber");

                    b.Property<int>("StudentEventId")
                        .HasColumnType("integer")
                        .HasColumnName("studenteventid");

                    b.Property<int>("StudentSemester")
                        .HasColumnType("integer")
                        .HasColumnName("studentsemester");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("studentstatusid");

                    b.Property<bool>("UseHolidayBase")
                        .HasColumnType("boolean")
                        .HasColumnName("useholidaybase");

                    b.Property<bool>("UseHostel")
                        .HasColumnType("boolean")
                        .HasColumnName("usehostel");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EducationFeeTypeId");

                    b.HasIndex("PartId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RelocatedFromPartId");

                    b.HasIndex("SemesterInstitutionId");

                    b.HasIndex("StudentEventId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("personstudentsemester");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentsemesterrelocatedfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFileHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personstudentsemesterrelocatedfilehistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentStickerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("note");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("partid");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PartId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personstudentstickernote");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.PersonLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("CreateInstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("createinstitutionid");

                    b.Property<int?>("CreateSubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("createsubordinateid");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer")
                        .HasColumnName("createuserid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Uan")
                        .HasColumnType("text")
                        .HasColumnName("uan");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreateInstitutionId");

                    b.HasIndex("CreateSubordinateId");

                    b.HasIndex("Uan")
                        .IsUnique();

                    b.ToTable("personlot");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.PersonLotAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actiondate");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("actiontype");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lotid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("LotId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personlotaction");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Collections.PersonImportUan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PersonImportId")
                        .HasColumnType("integer")
                        .HasColumnName("personimportid");

                    b.Property<string>("Uan")
                        .HasColumnType("text")
                        .HasColumnName("uan");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PersonImportId");

                    b.ToTable("personimportuan");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportErrorFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimporterrorfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimportfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryErrorFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimporthistoryerrorfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("personimporthistoryfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportErrorFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("specialityimporterrorfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("specialityimportfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryErrorFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("specialityimporthistoryerrorfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("specialityimporthistoryfile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("EntitiesAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("entitiesacceptedcount");

                    b.Property<int?>("EntitiesCount")
                        .HasColumnType("integer")
                        .HasColumnName("entitiescount");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finishdate");

                    b.Property<int?>("FirstCriteriaAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("firstcriteriaacceptedcount");

                    b.Property<int?>("FirstCriteriaCount")
                        .HasColumnType("integer")
                        .HasColumnName("firstcriteriacount");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SecondCriteriaAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("secondcriteriaacceptedcount");

                    b.Property<int?>("SecondCriteriaCount")
                        .HasColumnType("integer")
                        .HasColumnName("secondcriteriacount");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("useremail");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("personimport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImportHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("RdpzsdImportId")
                        .HasColumnType("integer")
                        .HasColumnName("rdpzsdimportid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("RdpzsdImportId");

                    b.ToTable("personimporthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("EntitiesAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("entitiesacceptedcount");

                    b.Property<int?>("EntitiesCount")
                        .HasColumnType("integer")
                        .HasColumnName("entitiescount");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finishdate");

                    b.Property<int?>("FirstCriteriaAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("firstcriteriaacceptedcount");

                    b.Property<int?>("FirstCriteriaCount")
                        .HasColumnType("integer")
                        .HasColumnName("firstcriteriacount");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int?>("SecondCriteriaAcceptedCount")
                        .HasColumnType("integer")
                        .HasColumnName("secondcriteriaacceptedcount");

                    b.Property<int?>("SecondCriteriaCount")
                        .HasColumnType("integer")
                        .HasColumnName("secondcriteriacount");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SubordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("subordinateid");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("useremail");

                    b.Property<string>("UserFullname")
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SubordinateId");

                    b.ToTable("specialityimport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImportHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("RdpzsdImportId")
                        .HasColumnType("integer")
                        .HasColumnName("rdpzsdimportid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("RdpzsdImportId");

                    b.ToTable("specialityimporthistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.SchemaVersion.SchemaVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Systemname")
                        .HasColumnType("text")
                        .HasColumnName("systemname");

                    b.Property<DateTime>("Updatedon")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedon");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("schemaversions");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Institution", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Parent");

                    b.Navigation("Root");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalForm", "EducationalForm")
                        .WithMany()
                        .HasForeignKey("EducationalFormId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany("InstitutionSpecialities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.NationalStatisticalInstitute", "NationalStatisticalInstitute")
                        .WithMany()
                        .HasForeignKey("NationalStatisticalInstituteId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.NationalStatisticalInstitute", "NsiRegion")
                        .WithMany()
                        .HasForeignKey("NsiRegionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationalForm");

                    b.Navigation("Institution");

                    b.Navigation("NationalStatisticalInstitute");

                    b.Navigation("NsiRegion");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpecialityJointSpeciality", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "InstitutionByParent")
                        .WithMany()
                        .HasForeignKey("InstitutionByParentId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("FK_institutionspecialityjointspeciality_institution_instituti~1");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", null)
                        .WithMany("InstitutionSpecialityJointSpecialities")
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("InstitutionByParent");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpecialityLanguage", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", null)
                        .WithMany("OrganizationSpecialityLanguages")
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Municipality", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonCitizenship", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", null)
                        .WithMany("AdmissionReasonCitizenships")
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonEducationFee", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", "AdmissionReason")
                        .WithMany("AdmissionReasonEducationFees")
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", "EducationFeeType")
                        .WithMany("AdmissionReasonEducationFees")
                        .HasForeignKey("EducationFeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmissionReason");

                    b.Navigation("EducationFeeType");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonEducationFeeHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonHistory", null)
                        .WithMany("AdmissionReasonEducationFeeHistories")
                        .HasForeignKey("AdmissionReasonHistoryId");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", null)
                        .WithMany("AdmissionReasonHistories")
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.School", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.School", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Parent");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Settlement", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Speciality", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId");

                    b.Navigation("EducationalQualification");

                    b.Navigation("ResearchArea");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEventQualification", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "EducationalQualification")
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", null)
                        .WithMany("StudentEventQualifications")
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationalQualification");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Migration.PersonLotIdNumber", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", "PersonLot")
                        .WithMany("PersonLotIdNumbers")
                        .HasForeignKey("PersonLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonLot");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.Collections.PassportCopy", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", "PersonBasic")
                        .WithOne("PassportCopy")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.Collections.PassportCopy", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonBasic");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PassportCopyHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", "PersonBasicHistory")
                        .WithOne("PassportCopy")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PassportCopyHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonBasicHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "BirthDistrict")
                        .WithMany()
                        .HasForeignKey("BirthDistrictId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "BirthMunicipality")
                        .WithMany()
                        .HasForeignKey("BirthMunicipalityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "BirthSettlement")
                        .WithMany()
                        .HasForeignKey("BirthSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", null)
                        .WithMany("Histories")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "ResidenceCountry")
                        .WithMany()
                        .HasForeignKey("ResidenceCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "ResidenceDistrict")
                        .WithMany()
                        .HasForeignKey("ResidenceDistrictId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "ResidenceMunicipality")
                        .WithMany()
                        .HasForeignKey("ResidenceMunicipalityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "ResidenceSettlement")
                        .WithMany()
                        .HasForeignKey("ResidenceSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "SecondCitizenship")
                        .WithMany()
                        .HasForeignKey("SecondCitizenshipId");

                    b.Navigation("BirthCountry");

                    b.Navigation("BirthDistrict");

                    b.Navigation("BirthMunicipality");

                    b.Navigation("BirthSettlement");

                    b.Navigation("Citizenship");

                    b.Navigation("ResidenceCountry");

                    b.Navigation("ResidenceDistrict");

                    b.Navigation("ResidenceMunicipality");

                    b.Navigation("ResidenceSettlement");

                    b.Navigation("SecondCitizenship");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistoryInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", "PersonBasicHistory")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistoryInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonBasicHistory");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", "AdmissionReason")
                        .WithMany()
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "InstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", null)
                        .WithMany("Histories")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeAcquiredForeignEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeAcquiredForeignEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "PeCountry")
                        .WithMany()
                        .HasForeignKey("PeCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeInstitution")
                        .WithMany()
                        .HasForeignKey("PeInstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "PeInstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("PeInstitutionSpecialityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", "PeResearchArea")
                        .WithMany()
                        .HasForeignKey("PeResearchAreaId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeSubordinate")
                        .WithMany()
                        .HasForeignKey("PeSubordinateId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("AdmissionReason");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionSpeciality");

                    b.Navigation("PeAcquiredForeignEducationalQualification");

                    b.Navigation("PeCountry");

                    b.Navigation("PeEducationalQualification");

                    b.Navigation("PeInstitution");

                    b.Navigation("PeInstitutionSpeciality");

                    b.Navigation("PeResearchArea");

                    b.Navigation("PeSubordinate");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistoryInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", "PersonDoctoralHistory")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistoryInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonDoctoralHistory");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralPeRecognitionDocumentHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", "PersonDoctoralHistory")
                        .WithOne("PeRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralPeRecognitionDocumentHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonDoctoralHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralSemesterHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", "EducationFeeType")
                        .WithMany()
                        .HasForeignKey("EducationFeeTypeId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", null)
                        .WithMany("Semesters")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", "RelocatedFromPart")
                        .WithMany()
                        .HasForeignKey("RelocatedFromPartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationFeeType");

                    b.Navigation("RelocatedFromPart");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonImageHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", "PersonBasicHistory")
                        .WithOne("PersonImage")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonImageHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonBasicHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaFileHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaHistory", "Diploma")
                        .WithOne("File")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaFileHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", "PersonStudentHistory")
                        .WithOne("Diploma")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudentHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaFileHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaHistory", "Diploma")
                        .WithOne("File")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaFileHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", null)
                        .WithMany("DuplicateDiplomas")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", "AdmissionReason")
                        .WithMany()
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "InstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", null)
                        .WithMany("Histories")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeAcquiredForeignEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeAcquiredForeignEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "PeCountry")
                        .WithMany()
                        .HasForeignKey("PeCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeInstitution")
                        .WithMany()
                        .HasForeignKey("PeInstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "PeInstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("PeInstitutionSpecialityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", "PeResearchArea")
                        .WithMany()
                        .HasForeignKey("PeResearchAreaId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeSubordinate")
                        .WithMany()
                        .HasForeignKey("PeSubordinateId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("AdmissionReason");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionSpeciality");

                    b.Navigation("PeAcquiredForeignEducationalQualification");

                    b.Navigation("PeCountry");

                    b.Navigation("PeEducationalQualification");

                    b.Navigation("PeInstitution");

                    b.Navigation("PeInstitutionSpeciality");

                    b.Navigation("PeResearchArea");

                    b.Navigation("PeSubordinate");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistoryInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", "PersonStudentHistory")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistoryInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonStudentHistory");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentPeRecognitionDocumentHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", "PersonStudentHistory")
                        .WithOne("PeRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentPeRecognitionDocumentHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudentHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentProtocolHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", null)
                        .WithMany("Protocols")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentSemesterHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", "EducationFeeType")
                        .WithMany()
                        .HasForeignKey("EducationFeeTypeId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", null)
                        .WithMany("Semesters")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "RelocatedFromPart")
                        .WithMany()
                        .HasForeignKey("RelocatedFromPartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "SemesterInstitution")
                        .WithMany()
                        .HasForeignKey("SemesterInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationFeeType");

                    b.Navigation("Period");

                    b.Navigation("RelocatedFromPart");

                    b.Navigation("SemesterInstitution");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "BirthDistrict")
                        .WithMany()
                        .HasForeignKey("BirthDistrictId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "BirthMunicipality")
                        .WithMany()
                        .HasForeignKey("BirthMunicipalityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "BirthSettlement")
                        .WithMany()
                        .HasForeignKey("BirthSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", "Lot")
                        .WithOne("PersonBasic")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "ResidenceCountry")
                        .WithMany()
                        .HasForeignKey("ResidenceCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.District", "ResidenceDistrict")
                        .WithMany()
                        .HasForeignKey("ResidenceDistrictId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Municipality", "ResidenceMunicipality")
                        .WithMany()
                        .HasForeignKey("ResidenceMunicipalityId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "ResidenceSettlement")
                        .WithMany()
                        .HasForeignKey("ResidenceSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "SecondCitizenship")
                        .WithMany()
                        .HasForeignKey("SecondCitizenshipId");

                    b.Navigation("BirthCountry");

                    b.Navigation("BirthDistrict");

                    b.Navigation("BirthMunicipality");

                    b.Navigation("BirthSettlement");

                    b.Navigation("Citizenship");

                    b.Navigation("Lot");

                    b.Navigation("ResidenceCountry");

                    b.Navigation("ResidenceDistrict");

                    b.Navigation("ResidenceMunicipality");

                    b.Navigation("ResidenceSettlement");

                    b.Navigation("SecondCitizenship");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasicInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", "PersonBasic")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasicInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonBasic");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", "AdmissionReason")
                        .WithMany()
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "InstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", "Lot")
                        .WithMany("PersonDoctorals")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeAcquiredForeignEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeAcquiredForeignEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "PeCountry")
                        .WithMany()
                        .HasForeignKey("PeCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeInstitution")
                        .WithMany()
                        .HasForeignKey("PeInstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "PeInstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("PeInstitutionSpecialityId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "PePart")
                        .WithMany()
                        .HasForeignKey("PePartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", "PeResearchArea")
                        .WithMany()
                        .HasForeignKey("PeResearchAreaId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeSubordinate")
                        .WithMany()
                        .HasForeignKey("PeSubordinateId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("AdmissionReason");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionSpeciality");

                    b.Navigation("Lot");

                    b.Navigation("PeAcquiredForeignEducationalQualification");

                    b.Navigation("PeCountry");

                    b.Navigation("PeEducationalQualification");

                    b.Navigation("PeInstitution");

                    b.Navigation("PeInstitutionSpeciality");

                    b.Navigation("PePart");

                    b.Navigation("PeResearchArea");

                    b.Navigation("PeSubordinate");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", "PersonDoctoral")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonDoctoral");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralPeRecognitionDocument", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", "PersonDoctoral")
                        .WithOne("PeRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralPeRecognitionDocument", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonDoctoral");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemester", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", "EducationFeeType")
                        .WithMany()
                        .HasForeignKey("EducationFeeTypeId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", null)
                        .WithMany("Semesters")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", "RelocatedFromPart")
                        .WithMany()
                        .HasForeignKey("RelocatedFromPartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationFeeType");

                    b.Navigation("RelocatedFromPart");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemester", "PersonDoctoralSemester")
                        .WithOne("SemesterRelocatedFile")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonDoctoralSemester");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFileHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralSemesterHistory", "PersonDoctoralSemesterHistory")
                        .WithOne("SemesterRelocatedFile")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemesterRelocatedFileHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonDoctoralSemesterHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonImage", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", "PersonBasic")
                        .WithOne("PersonImage")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonImage", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonBasic");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "MissingSchoolSettlement")
                        .WithMany()
                        .HasForeignKey("MissingSchoolSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", null)
                        .WithMany("Histories")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("Country");

                    b.Navigation("MissingSchoolSettlement");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistoryInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistory", "PersonSecondaryHistory")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistoryInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonSecondaryHistory");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryRecognitionDocumentHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistory", "PersonSecondaryHistory")
                        .WithOne("PersonSecondaryRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryRecognitionDocumentHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonSecondaryHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonDiplomaCopy", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", null)
                        .WithMany("PersonDiplomaCopies")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", "Lot")
                        .WithOne("PersonSecondary")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Settlement", "MissingSchoolSettlement")
                        .WithMany()
                        .HasForeignKey("MissingSchoolSettlementId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("Country");

                    b.Navigation("Lot");

                    b.Navigation("MissingSchoolSettlement");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", "PersonSecondary")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonSecondary");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryRecognitionDocument", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", "PersonSecondary")
                        .WithOne("PersonSecondaryRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondaryRecognitionDocument", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonSecondary");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", "AdmissionReason")
                        .WithMany()
                        .HasForeignKey("AdmissionReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "InstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("InstitutionSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", "Lot")
                        .WithMany("PersonStudents")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeAcquiredForeignEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeAcquiredForeignEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Country", "PeCountry")
                        .WithMany()
                        .HasForeignKey("PeCountryId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.EducationalQualification", "PeEducationalQualification")
                        .WithMany()
                        .HasForeignKey("PeEducationalQualificationId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeInstitution")
                        .WithMany()
                        .HasForeignKey("PeInstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", "PeInstitutionSpeciality")
                        .WithMany()
                        .HasForeignKey("PeInstitutionSpecialityId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "PePart")
                        .WithMany()
                        .HasForeignKey("PePartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.ResearchArea", "PeResearchArea")
                        .WithMany()
                        .HasForeignKey("PeResearchAreaId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "PeSubordinate")
                        .WithMany()
                        .HasForeignKey("PeSubordinateId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("AdmissionReason");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionSpeciality");

                    b.Navigation("Lot");

                    b.Navigation("PeAcquiredForeignEducationalQualification");

                    b.Navigation("PeCountry");

                    b.Navigation("PeEducationalQualification");

                    b.Navigation("PeInstitution");

                    b.Navigation("PeInstitutionSpeciality");

                    b.Navigation("PePart");

                    b.Navigation("PeResearchArea");

                    b.Navigation("PeSubordinate");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiploma", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "PersonStudent")
                        .WithOne("Diploma")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiploma", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudent");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiplomaFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiploma", "Diploma")
                        .WithOne("File")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiplomaFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiploma", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", null)
                        .WithMany("DuplicateDiplomas")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiplomaFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiploma", "DuplicateDiploma")
                        .WithOne("File")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiplomaFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DuplicateDiploma");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentInfo", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "PersonStudent")
                        .WithOne("PartInfo")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentInfo", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("PersonStudent");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentPeRecognitionDocument", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "PersonStudent")
                        .WithOne("PeRecognitionDocument")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentPeRecognitionDocument", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudent");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentProtocol", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", null)
                        .WithMany("Protocols")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemester", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", "EducationFeeType")
                        .WithMany()
                        .HasForeignKey("EducationFeeTypeId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", null)
                        .WithMany("Semesters")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Others.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", "RelocatedFromPart")
                        .WithMany()
                        .HasForeignKey("RelocatedFromPartId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "SemesterInstitution")
                        .WithMany()
                        .HasForeignKey("SemesterInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", "StudentEvent")
                        .WithMany()
                        .HasForeignKey("StudentEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentStatus", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EducationFeeType");

                    b.Navigation("Period");

                    b.Navigation("RelocatedFromPart");

                    b.Navigation("SemesterInstitution");

                    b.Navigation("StudentEvent");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemester", "PersonStudentSemester")
                        .WithOne("SemesterRelocatedFile")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudentSemester");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFileHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentSemesterHistory", "PersonStudentSemesterHistory")
                        .WithOne("SemesterRelocatedFile")
                        .HasForeignKey("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemesterRelocatedFileHistory", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonStudentSemesterHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentStickerNote", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", null)
                        .WithMany("StickerNotes")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.PersonLot", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "CreateInstitution")
                        .WithMany()
                        .HasForeignKey("CreateInstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "CreateSubordinate")
                        .WithMany()
                        .HasForeignKey("CreateSubordinateId");

                    b.Navigation("CreateInstitution");

                    b.Navigation("CreateSubordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.PersonLotAction", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");

                    b.HasOne("Rdpzsd.Models.Models.Rdpzsd.PersonLot", null)
                        .WithMany("PersonLotActions")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Collections.PersonImportUan", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", null)
                        .WithMany("PersonImportUans")
                        .HasForeignKey("PersonImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportErrorFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", "PersonImport")
                        .WithOne("ErrorFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportErrorFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonImport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", "PersonImport")
                        .WithOne("ImportFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonImport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryErrorFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImportHistory", "PersonImportHistory")
                        .WithOne("ErrorFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryErrorFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonImportHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImportHistory", "PersonImportHistory")
                        .WithOne("ImportFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.PersonImportHistoryFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonImportHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportErrorFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", "SpecialityImport")
                        .WithOne("ErrorFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportErrorFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SpecialityImport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", "SpecialityImport")
                        .WithOne("ImportFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SpecialityImport");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryErrorFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImportHistory", "SpecialityImportHistory")
                        .WithOne("ErrorFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryErrorFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SpecialityImportHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryFile", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImportHistory", "SpecialityImportHistory")
                        .WithOne("ImportFile")
                        .HasForeignKey("Rdpzsd.Models.Models.RdpzsdImports.Files.SpecialityImportHistoryFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SpecialityImportHistory");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImportHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", null)
                        .WithMany("ImportHistories")
                        .HasForeignKey("RdpzsdImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rdpzsd.Models.Models.Nomenclatures.Institution", "Subordinate")
                        .WithMany()
                        .HasForeignKey("SubordinateId");

                    b.Navigation("Institution");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImportHistory", b =>
                {
                    b.HasOne("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", null)
                        .WithMany("ImportHistories")
                        .HasForeignKey("RdpzsdImportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Institution", b =>
                {
                    b.Navigation("InstitutionSpecialities");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.InstitutionSpeciality", b =>
                {
                    b.Navigation("InstitutionSpecialityJointSpecialities");

                    b.Navigation("OrganizationSpecialityLanguages");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReason", b =>
                {
                    b.Navigation("AdmissionReasonCitizenships");

                    b.Navigation("AdmissionReasonEducationFees");

                    b.Navigation("AdmissionReasonHistories");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.AdmissionReasonHistory", b =>
                {
                    b.Navigation("AdmissionReasonEducationFeeHistories");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.Others.EducationFeeType", b =>
                {
                    b.Navigation("AdmissionReasonEducationFees");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Nomenclatures.StudentStatus.StudentEvent", b =>
                {
                    b.Navigation("StudentEventQualifications");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonBasicHistory", b =>
                {
                    b.Navigation("PartInfo");

                    b.Navigation("PassportCopy");

                    b.Navigation("PersonImage");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralHistory", b =>
                {
                    b.Navigation("PartInfo");

                    b.Navigation("PeRecognitionDocument");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonDoctoralSemesterHistory", b =>
                {
                    b.Navigation("SemesterRelocatedFile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDiplomaHistory", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentDuplicateDiplomaHistory", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentHistory", b =>
                {
                    b.Navigation("Diploma");

                    b.Navigation("DuplicateDiplomas");

                    b.Navigation("PartInfo");

                    b.Navigation("PeRecognitionDocument");

                    b.Navigation("Protocols");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.History.PersonStudentSemesterHistory", b =>
                {
                    b.Navigation("SemesterRelocatedFile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonBasic", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("PartInfo");

                    b.Navigation("PassportCopy");

                    b.Navigation("PersonImage");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoral", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("PartInfo");

                    b.Navigation("PeRecognitionDocument");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonDoctoralSemester", b =>
                {
                    b.Navigation("SemesterRelocatedFile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.History.PersonSecondaryHistory", b =>
                {
                    b.Navigation("PartInfo");

                    b.Navigation("PersonSecondaryRecognitionDocument");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonSecondary.PersonSecondary", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("PartInfo");

                    b.Navigation("PersonSecondaryRecognitionDocument");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudent", b =>
                {
                    b.Navigation("Diploma");

                    b.Navigation("DuplicateDiplomas");

                    b.Navigation("Histories");

                    b.Navigation("PartInfo");

                    b.Navigation("PeRecognitionDocument");

                    b.Navigation("Protocols");

                    b.Navigation("Semesters");

                    b.Navigation("StickerNotes");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDiploma", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentDuplicateDiploma", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.Parts.PersonStudentSemester", b =>
                {
                    b.Navigation("SemesterRelocatedFile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.Rdpzsd.PersonLot", b =>
                {
                    b.Navigation("PersonBasic");

                    b.Navigation("PersonDiplomaCopies");

                    b.Navigation("PersonDoctorals");

                    b.Navigation("PersonLotActions");

                    b.Navigation("PersonLotIdNumbers");

                    b.Navigation("PersonSecondary");

                    b.Navigation("PersonStudents");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImport", b =>
                {
                    b.Navigation("ErrorFile");

                    b.Navigation("ImportFile");

                    b.Navigation("ImportHistories");

                    b.Navigation("PersonImportUans");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.PersonImportHistory", b =>
                {
                    b.Navigation("ErrorFile");

                    b.Navigation("ImportFile");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImport", b =>
                {
                    b.Navigation("ErrorFile");

                    b.Navigation("ImportFile");

                    b.Navigation("ImportHistories");
                });

            modelBuilder.Entity("Rdpzsd.Models.Models.RdpzsdImports.SpecialityImportHistory", b =>
                {
                    b.Navigation("ErrorFile");

                    b.Navigation("ImportFile");
                });
#pragma warning restore 612, 618
        }
    }
}
